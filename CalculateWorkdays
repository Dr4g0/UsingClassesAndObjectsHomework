//Write a method that calculates the number of workdays between today and given date, passed as parameter.
//Consider that workdays are all days from Monday to Friday except a fixed list of public holidays 
//specified preliminary as array.

using System;

class CalculateWorkdays
{
    static void Main()
    {
        DateTime[] publicHolidays = { new DateTime(2013, 1, 1), new DateTime(2013, 3, 3), new DateTime(2013, 5, 1), 
                                  new DateTime(2013, 5, 2), new DateTime(2013, 5, 3), new DateTime(2013, 5, 4), 
                                  new DateTime(2013, 5, 5), new DateTime(2013, 5, 6), new DateTime(2013, 5, 24), 
                                  new DateTime(2013, 9, 6), new DateTime(2013, 9, 22), new DateTime(2013, 12, 24), 
                                  new DateTime(2013, 12, 25), new DateTime(2013, 12, 26) };
        int workdays = WorkdaysFromToday(publicHolidays,new DateTime(2013,9,23));
        Console.WriteLine(workdays);
    }

    static int WorkdaysFromToday(DateTime[] publicHolidays, params DateTime[] date)
    {
        int diffInDays = Math.Abs((DateTime.Today - date[0]).Days)+1;
        int workdays = diffInDays / 7 * 5;
        for (int i = 0; i < diffInDays % 7; i++)
        {
            if (((DateTime.Today - date[0]).Days) > 0)
            {
                if ((int)(date[0].AddDays(i).DayOfWeek) != 6 && (int)(date[0].AddDays(i).DayOfWeek) != 0)
                {
                    workdays++;
                }
            }
            else
            {
                if ((int)(DateTime.Today.AddDays(i).DayOfWeek) != 6 && (int)(DateTime.Today.AddDays(i).DayOfWeek) != 0)
                {
                    workdays++;
                }
            }
        }
        for (int i = 0; i < publicHolidays.Length; i++)
        {
            if (((DateTime.Today - date[0]).Days) > 0)
            {
                if (date[0]<=publicHolidays[i]&&publicHolidays[i]<=DateTime.Today)
                {
                    if ((int)(publicHolidays[i].DayOfWeek) != 6 && (int)(publicHolidays[i].DayOfWeek) != 0)
                    {
                        workdays--;
                    }
                }
            }
            else
            {
                if (date[0] >= publicHolidays[i] && publicHolidays[i] >= DateTime.Today)
                {
                    if ((int)(publicHolidays[i].DayOfWeek) != 6 && (int)(publicHolidays[i].DayOfWeek) != 0)
                    {
                        workdays--;
                    }
                }
            }
        }
        return workdays;
    }
}
